{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/export/index.js"],"names":["getSystemFontsLocation","systemLibrary","NSFileManager","defaultManager","URLsForDirectory_inDomains","NSLibraryDirectory","systemLibraryPath","absoluteString","replace","systemFonts","fileExistsAtPath","getUserFontsLocation","userLibrary","userLibraryPath","userFonts","getSupplementalFontsLocation","getUserFonts","userFontsLoc","contentsOfDirectoryAtPath_error","nil","Array","from","item","String","getSystemFonts","systemFontsLoc","getSupplimentalFonts","supplementalFontsLoc","supplementalFonts","getAllFonts","fontLocations","fontLocationContents","availableFontLocations","filter","fontDir","length","allFonts","map","fontLocation","index","location","contents","getRoot","context","scriptPath","stringByDeletingLastPathComponent","getFileContent","filePath","NSString","stringWithContentsOfFile_encoding_error","getSavePath","document","fileURL","path","fileName","displayName","stringByDeletingPathExtension","savePanel","NSSavePanel","setTitle","setNameFieldLabel","setPrompt","setCanCreateDirectories","setNameFieldStringValue","runModal","NSOKButton","URL","writeFile","options","content","stringWithString","savePathName","createDirectoryAtPath_withIntermediateDirectories_attributes_error","push","join","writeToFile_atomically_encoding_error","moveImages","images","savePath","imagesPath","createDirectoryAtPath_attributes","forEach","image","moveItemAtPath_toPath_error","src","id","moveSVGs","svgs","svgsPath","svg","getFontNameVariations","font","noSpace","hyphenCase","containsFontNameVariation","fontFileName","fontNameVariations","contains","normalizedFileName","toUpperCase","variation","normalizedNameVariant","indexOf","copyFonts","fonts","fontsSavePath","fontFiles","fontFile","copyItemAtPath_toPath_error","getFinalStore","store","finalStore","Object","assign","JSON","stringify"],"mappings":"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","file":"resources_export_index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./resources/export/index.js\");\n","export const getSystemFontsLocation = () => {\n    //@ts-ignore\n    const systemLibrary = NSFileManager.defaultManager().URLsForDirectory_inDomains(NSLibraryDirectory, 8)[0];\n    const systemLibraryPath = systemLibrary ? systemLibrary.absoluteString().replace('file://', '') : null;\n    //@ts-ignore\n    const systemFonts = systemLibraryPath ? NSFileManager.defaultManager().fileExistsAtPath(`${systemLibraryPath}Fonts`) : null;\n    if (systemFonts) {\n        return `${systemLibraryPath}Fonts/`;\n    }\n    else {\n        return null;\n    }\n};\nexport const getUserFontsLocation = () => {\n    //@ts-ignore\n    const userLibrary = NSFileManager.defaultManager().URLsForDirectory_inDomains(NSLibraryDirectory, 1)[0];\n    const userLibraryPath = userLibrary ? userLibrary.absoluteString().replace('file://', '') : null;\n    //@ts-ignore\n    const userFonts = userLibraryPath ? NSFileManager.defaultManager().fileExistsAtPath(`${userLibraryPath}Fonts`) : null;\n    if (userFonts) {\n        return `${userLibraryPath}Fonts/`;\n    }\n    else {\n        return null;\n    }\n};\nexport const getSupplementalFontsLocation = () => {\n    //@ts-ignore\n    const systemLibrary = NSFileManager.defaultManager().URLsForDirectory_inDomains(NSLibraryDirectory, 8)[0];\n    const systemLibraryPath = systemLibrary ? systemLibrary.absoluteString().replace('file://', '') : null;\n    //@ts-ignore\n    const systemFonts = systemLibraryPath ? NSFileManager.defaultManager().fileExistsAtPath(`${systemLibraryPath}Fonts/Supplemental`) : null;\n    if (systemFonts) {\n        return `${systemLibraryPath}Fonts/Supplemental/`;\n    }\n    else {\n        return null;\n    }\n};\nexport const getUserFonts = () => {\n    const userFontsLoc = getUserFontsLocation();\n    if (userFontsLoc) {\n        //@ts-ignore\n        const userFonts = NSFileManager.defaultManager().contentsOfDirectoryAtPath_error(userFontsLoc, nil);\n        return Array.from(userFonts, (item) => { return String(item); });\n    }\n    else {\n        return null;\n    }\n};\nexport const getSystemFonts = () => {\n    const systemFontsLoc = getSystemFontsLocation();\n    if (systemFontsLoc) {\n        //@ts-ignore\n        const systemFonts = NSFileManager.defaultManager().contentsOfDirectoryAtPath_error(systemFontsLoc, nil);\n        return Array.from(systemFonts, (item) => { return String(item); });\n    }\n    else {\n        return null;\n    }\n};\nexport const getSupplimentalFonts = () => {\n    const supplementalFontsLoc = getSupplementalFontsLocation();\n    if (supplementalFontsLoc) {\n        //@ts-ignore\n        const supplementalFonts = NSFileManager.defaultManager().contentsOfDirectoryAtPath_error(supplementalFontsLoc, nil);\n        return Array.from(supplementalFonts, (item) => { return String(item); });\n    }\n    else {\n        return null;\n    }\n};\nexport const getAllFonts = () => {\n    const userFontsLoc = getUserFontsLocation();\n    const systemFontsLoc = getSystemFontsLocation();\n    const supplementalFontsLoc = getSupplementalFontsLocation();\n    const userFonts = getUserFonts();\n    const systemFonts = getSystemFonts();\n    const supplementalFonts = getSupplimentalFonts();\n    const fontLocations = [userFontsLoc, systemFontsLoc, supplementalFontsLoc];\n    const fontLocationContents = [userFonts, systemFonts, supplementalFonts];\n    const availableFontLocations = fontLocations.filter((fontDir) => fontDir !== null);\n    if (availableFontLocations.length > 0) {\n        const allFonts = availableFontLocations.map((fontLocation, index) => {\n            return {\n                location: fontLocation,\n                contents: fontLocationContents[index]\n            };\n        });\n        return allFonts;\n    }\n    else {\n        return null;\n    }\n};\nexport const getRoot = (context) => {\n    return context.scriptPath.stringByDeletingLastPathComponent().stringByDeletingLastPathComponent().stringByDeletingLastPathComponent();\n};\nexport const getFileContent = (filePath) => {\n    //@ts-ignore\n    return NSString.stringWithContentsOfFile_encoding_error(filePath, 4, nil);\n};\nexport const getSavePath = (context) => {\n    let filePath = context.document.fileURL() ? context.document.fileURL().path().stringByDeletingLastPathComponent() : \"~\";\n    let fileName = context.document.displayName().stringByDeletingPathExtension();\n    //@ts-ignore\n    let savePanel = NSSavePanel.savePanel();\n    savePanel.setTitle(\"Export spec\");\n    savePanel.setNameFieldLabel(\"Export to:\");\n    savePanel.setPrompt(\"Export\");\n    savePanel.setCanCreateDirectories(true);\n    savePanel.setNameFieldStringValue(fileName);\n    //@ts-ignore\n    if (savePanel.runModal() != NSOKButton) {\n        return false;\n    }\n    return savePanel.URL().path();\n};\n//@ts-ignore\nexport const writeFile = (options) => {\n    //@ts-ignore\n    let content = NSString.stringWithString(options.content);\n    let savePathName = [];\n    //@ts-ignore\n    NSFileManager.defaultManager().createDirectoryAtPath_withIntermediateDirectories_attributes_error(options.path, true, nil, nil);\n    savePathName.push(options.path, \"/\", options.fileName);\n    savePathName = savePathName.join(\"\");\n    content.writeToFile_atomically_encoding_error(savePathName, false, 4, null);\n};\n//@ts-ignore\nexport const moveImages = (images, savePath) => {\n    const imagesPath = `${savePath}/images`;\n    //@ts-ignore\n    NSFileManager.defaultManager().createDirectoryAtPath_attributes(imagesPath, nil);\n    images.forEach((image) => {\n        //@ts-ignore\n        NSFileManager.defaultManager().moveItemAtPath_toPath_error(image.src[`1x`], `${imagesPath}/${image.id}.png`, nil);\n        //@ts-ignore\n        NSFileManager.defaultManager().moveItemAtPath_toPath_error(image.src[`2x`], `${imagesPath}/${image.id}@2x.png`, nil);\n    });\n};\n//@ts-ignore\nexport const moveSVGs = (svgs, savePath) => {\n    const svgsPath = `${savePath}/svgs`;\n    //@ts-ignore\n    NSFileManager.defaultManager().createDirectoryAtPath_attributes(svgsPath, nil);\n    svgs.forEach((svg) => {\n        //@ts-ignore\n        NSFileManager.defaultManager().moveItemAtPath_toPath_error(svg.src, `${svgsPath}/${svg.id}.svg`, nil);\n    });\n};\nconst getFontNameVariations = (font) => {\n    const noSpace = font.replace(/\\s/g, '');\n    const hyphenCase = font.replace(/\\s/g, '-');\n    return [\n        font,\n        noSpace,\n        hyphenCase\n    ];\n};\nconst containsFontNameVariation = (fontFileName, fontNameVariations) => {\n    let contains = false;\n    const normalizedFileName = fontFileName.toUpperCase();\n    fontNameVariations.forEach((variation) => {\n        const normalizedNameVariant = variation.toUpperCase();\n        if (normalizedFileName.indexOf(normalizedNameVariant) !== -1) {\n            contains = true;\n        }\n    });\n    return contains;\n};\nexport const copyFonts = (fonts, savePath) => {\n    // get user, system, and supplemental fonts\n    const allFonts = getAllFonts();\n    // set font save location\n    const fontsSavePath = `${savePath}/fonts`;\n    // if some font directories exist, move forward\n    if (allFonts) {\n        // create base font directory in spec folder\n        //@ts-ignore\n        NSFileManager.defaultManager().createDirectoryAtPath_attributes(fontsSavePath, nil);\n        // loop through app fonts\n        fonts.forEach((font) => {\n            // loop through font directories\n            allFonts.forEach((fontDir) => {\n                // if directory exists, move forward\n                const fontNameVariations = getFontNameVariations(font);\n                const fontFiles = fontDir.contents.filter((fontFileName) => {\n                    return containsFontNameVariation(fontFileName, fontNameVariations);\n                });\n                if (fontFiles.length > 0) {\n                    //@ts-ignore\n                    NSFileManager.defaultManager().createDirectoryAtPath_attributes(`${fontsSavePath}/${font}`, nil);\n                    fontFiles.forEach((fontFile) => {\n                        //@ts-ignore\n                        NSFileManager.defaultManager().copyItemAtPath_toPath_error(`${fontDir.location}/${fontFile}`, `${fontsSavePath}/${font}/${fontFile}`, nil);\n                    });\n                }\n            });\n        });\n    }\n};\nexport const getFinalStore = (store) => {\n    // copy store, and set final store\n    let finalStore = Object.assign({}, store);\n    // update final store image paths\n    finalStore.images = store.images.map((image) => {\n        return {\n            id: image.id,\n            src: {\n                [`1x`]: `images/${image.id}.png`,\n                [`2x`]: `images/${image.id}@2x.png`\n            }\n        };\n    });\n    // update final store svg paths\n    finalStore.svgs = store.svgs.map((svg) => {\n        return {\n            id: svg.id,\n            src: `svgs/${svg.id}.svg`\n        };\n    });\n    // return strigified final store\n    return JSON.stringify(finalStore);\n};\n"],"sourceRoot":""}